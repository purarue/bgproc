#!/usr/bin/env bash
# a bash loop to run things in the background
# uses my evry tool to run commands periodically
# https://github.com/seanbreckenridge/evry

readonly script_name='bgproc'

havecmd() {
	local BINARY ERRMSG
	# error if first argument isn't provided
	BINARY="${1:?Must provide command to check}"
	# the commend exists, exit with 0 (success!)
	if command -v "$BINARY" >/dev/null 2>&1; then
		return 0
	else
		# construct error message
		ERRMSG="'$script_name' requires '$BINARY', could not find that on your \$PATH"
		if [[ -n "$2" ]]; then
			ERRMSG="$ERRMSG. $2"
		fi
		printf '%s\n' "$ERRMSG" 1>&2
		return 1
	fi
}

##### SETUP #####

havecmd evry 'Install it with "cargo install evry"' || exit $?

declare -rx LOCKFILE="${BGPROC_LOCKFILE:-/tmp/bgproc.lock}"
declare -rx LOGFILE="${BGPROC_LOGFILE:-/tmp/bgproc.log}"
declare -rx SLEEP_TIME="${BGPROC_SLEEPTIME:-60}"

##### OUT/ERR LOGGING FUNCTIONS #####

# both of these accept one argument, which is the message to print

# print a log to STDOUT and append to logfile
printlog() {
	printf "$(date +%s):%s\n" "$1" | tee -a "$LOGFILE"
} && export -f printlog

# print a log to to STDERR, and append to the logfile
# sends a notification if possible
send-error() {
	local title
	title="${BGPROC_TITLE:-'bgproc error'}"
	printf '%s:error:%s\n' "$(date +%s)" "$1" >>"$LOGFILE"
	printf '%s\n' "$1" >&2
	# on linux
	havecmd notify-send 2>/dev/null && notify-send -u critical "${title}" "$1" && return
	# on mac
	havecmd osascript 2>/dev/null && osascript -e "$(printf 'display notification "%s" with title "%s"' "${title}" "$1")" && return
} && export -f send-error

#### CORE FUNCTIONALITY ####

declare -a JOB_DIRS
JOB_DIRS=()

# shorthand to list all jobs
job_list() {
	for dir in "${JOB_DIRS[@]}"; do
		find -L "${dir}" -type f -name "*.job" -print0
	done
}

# print a list of all of the jobs
print_jobs() {
	printlog "Searching for jobs in:"
	for dir in "${JOB_DIRS[@]}"; do
		printlog "${dir}"
	done
	printlog "Job List:"
	while read -r -d $'\0' script; do
		printlog "${script}"
	done < <(job_list)
}

# read in jobs, run each of them
loop_iteration() {
	while read -r -d $'\0' script; do
		bash "${script}" 2>&1
	done < <(job_list)
}

# main, background loop
bgproc_loop() {
	printlog "Sleep duration: ${SLEEP_TIME}"
	printlog "Starting loop..."
	while true; do
		loop_iteration
		sleep "${SLEEP_TIME}"
	done
}

#### PARSE FLAGS ####

ACTION='loop'

# handle flags and run
while getopts 'hod' opt; do
	case "${opt}" in
	h)
		echo "Usage: bgproc [-o] [-d] [DIR...]"
		echo "Runs tasks in the background. Run without flags to start the background loop"
		echo "	-o		Runs the task loop once"
		echo "	-d		Runs the task loop once, in debug mode"
		echo "Any additional arguments should be directories which contain '.job' files"
		echo "If no directories are provided, searches from the current directory recursively"
		echo "See https://github.com/seanbreckenridge/bgproc for more info"
		exit 0
		;;
	o)
		ACTION='once'
		;;
	d)
		ACTION='debug'
		;;
	*)
		echo "Unexpected argument: ${opt}" >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

# If no additional positions were given, assume current directory
case "${#@}" in
0)
	JOB_DIRS+=('.')
	;;
*)
	for dir in "$@"; do
		JOB_DIRS+=("${dir}")
		[[ -e "${dir}" ]] || printf "Warning: %s does not exist...\n" "${dir}" >&2
		[[ -d "${dir}" ]] || printf "Warning: %s is not a directory...\n" "${dir}" >&2
	done
	;;
esac

##### LOCKFILE #####

check_lockfile() {
	# exit if lock file already exists
	if [[ -e "${LOCKFILE}" ]]; then
		send-error "Lockfile at ${LOCKFILE} already exists, exiting..."
		exit 1
	fi
}

# delete lockfile when bgproc exits
cleanup() {
	rm "${LOCKFILE}"
}
trap cleanup EXIT

##### RUN #####

case "${ACTION}" in
once)
	print_jobs
	loop_iteration
	;;
debug)
	print_jobs
	EVRY_DEBUG=1 loop_iteration
	;;
loop)
	# only check lockfile when running loop, allows the user to run -o or -d
	# without having to specify a separate lockfile
	check_lockfile
	# create lockfile
	touch "${LOCKFILE}"
	bgproc_loop
	;;
esac
