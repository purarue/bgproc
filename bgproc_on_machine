#!/usr/bin/env bash
# A helper script which uses on_machine to figure out which
# directories to include in my bgproc directories
# https://github.com/seanbreckenridge/on_machine
#
# if ON_MACHINE_PATTERN is set, on_machine uses that instead of the
# default '%o/%d/%h' to search for directories
# see: https://github.com/seanbreckenridge/on_machine#match

havecmd() {
	local BINARY ERRMSG
	BINARY="${1:?Must provide command to check}"
	if command -v "$BINARY" >/dev/null 2>&1; then
		return 0
	else
		ERRMSG="bgproc_on_machine requires '$BINARY', could not find that on your \$PATH"
		[[ -n "$2" ]] && ERRMSG="$ERRMSG. $2"
		eprintf '%s\n' "$ERRMSG"
		return 1
	fi
}

set -e
havecmd bgproc
havecmd on_machine 'See https://github.com/seanbreckenridge/on_machine'

declare -a BASE_DIRS
declare -a OS_DIRS

split_bgproc_paths() {
	if [[ -z "$BGPROC_PATH" ]]; then
		echo 'The BGPROC_PATH environment variable is not set. That should contain a colon-delimited list of directories which contain on_machine directory structures. E.g., in your shell profile, set:' >&2
		# shellcheck disable=SC2016
		echo 'export BGPROC_PATH="${HOME}/.local/jobs:${HOME}/data/jobs"'
		return 1
	fi
	IFS=: read -r -a BASE_DIRS <<<"$BGPROC_PATH"
	unset IFS
}

compute_os_dirs() {
	local -a ON_MACHINE_ARGS=()
	[[ -n "${ON_MACHINE_PATTERN}" ]] && ON_MACHINE_ARGS+=("${ON_MACHINE_PATTERN}")
	for base in "${BASE_DIRS[@]}"; do
		[[ -z "$base" ]] && continue
		if [[ ! -d "${base}" ]]; then
			printf 'Base dir "%s" does not exist\n' "$base"
			continue
		fi
		while read -r -d $'\0' match; do
			OS_DIRS+=("$match")
		done < <(on_machine -cmd match -print0 -filter dir -base "${base}" "${ON_MACHINE_ARGS[@]}")
	done
}

main() {
	split_bgproc_paths || return $?
	compute_os_dirs || return $?
	if [[ "${#OS_DIRS}" == 0 ]]; then
		echo 'Computed directories are empty, exiting...' >&2
		exit 1
	fi
	exec bgproc "$@" "${OS_DIRS[@]}"
}

main "$@" || exit $?
